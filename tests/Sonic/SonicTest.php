<?php
namespace Sonic;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-20 at 00:37:02.
 */
class SonicTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // Set superglobals to define application state
        $_SERVER['DOCUMENT_ROOT']   = '/var/www';
        $_SERVER['SCRIPT_FILENAME'] = '/var/www/sonic/index.php';
        $_SERVER['SERVER_NAME']     = 'sonic';
        $_SERVER['SERVER_PORT']     = '80';
        $_SERVER['SCRIPT_NAME']     = '/sonic/';
        $_SERVER['REQUEST_URL']     = '';
        $_SERVER['REQUEST_URI']     = '';
        $_SERVER['REQUEST_METHOD']  = 'GET';
        $_SERVER['QUERY_STRING']    = '';
        $_SERVER['HTTPS']           = '';
        $_SERVER['REMOTE_ADDR']     = '127.0.0.1';
        unset($_SERVER['CONTENT_TYPE'], $_SERVER['CONTENT_LENGTH']);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        Sonic::kill();
    }

    /**
     * CONSTRUCTOR TESTS
     */

    /**
     * @covers Sonic\Sonic::__construct()
     */
    public function testConstructWithOwnSettingsArray()
    {
        $config = array(
            'sonic.environment'           => 'dev',
            'sonic.content_dir'           => 'content',
            'sonic.plugins_dir'           => 'plugins',
            'sonic.templates_dir'         => 'templates',
            'sonic.default_template'      => 'base.twig',
            'sonic.default_list_template' => 'list.twig',
            'sonic.content_ext'           => array('.md', '.markdown'),
            'sonic.plugins_enabled'       => true,
            'site.site_root'              => 'http://localhost:8888/sonic/',
            'site.site_title'             => 'Sonic',
            'site.author'                 => 'Hassan Khan',
            'site.author_email'           => 'contact@hassankhan.me',
            'site.date_format'            => 'jS M Y',
            'site.excerpt_newline_limit'  => '5',
            'site.nav.class'              => 'nav',
            'site.nav.dropdown_li_class'  => 'dropdown',
            'site.nav.dropdown_ul_class'  => 'dropdown-menu',
            'site.nav.dropdown_li_markup' => '<li class="%s"><a href="%s" class="dropdown-toggle" data-toggle="dropdown"> %s <b class="caret"></b></a><ul class="%s">',
            'twig'                       => array(
                'charset'           => 'utf-8',
                'cache'             => 'cache',
                'strict_variables'  => false,
                'autoescape'        => false,
                'auto_reload'       => true
            )
        );
        $sonic = new Sonic($config);
        $this->assertEquals($config, $sonic->app['settings']);
    }

    /**
     * @covers       Sonic\Sonic::__construct()
     * @dataProvider providerConfigs
     */
    public function testDependenciesAdded($config)
    {
        $sonic = new Sonic($config);

        // Check for request
        $this->assertArrayHasKey('request', $sonic->app);
        $this->assertInstanceOf(
            'Symfony\Component\HttpFoundation\Request',
            $sonic->app['request']
        );

        // Check for response
        $this->assertArrayHasKey('response', $sonic->app);
        $this->assertInstanceOf(
            'Symfony\Component\HttpFoundation\Response',
            $sonic->app['response']
        );

        // Check for router
        $this->assertArrayHasKey('router', $sonic->app);
        $this->assertInstanceOf(
            'Sonic\Routing\Router',
            $sonic->app['router']
        );

        // Check for filesystem
        $this->assertArrayHasKey('filesystem', $sonic->app);
        $this->assertInstanceOf(
            'League\Flysystem\Filesystem',
            $sonic->app['filesystem']
        );

        // Check for helper
        $this->assertArrayHasKey('helper', $sonic->app);
        $this->assertInstanceOf(
            'Sonic\Helper',
            $sonic->app['helper']
        );

        // Check for Twig
        $this->assertArrayHasKey('twig', $sonic->app);
        $this->assertInstanceOf(
            '\Twig_Environment',
            $sonic->app['twig']
        );
        // Add check to see if extension is loaded in?
    }

    /**
     * INITIALIZATION TESTS
     */

    /**
     * @covers       Sonic\Sonic::load_plugins()
     * @dataProvider providerConfigs
     */
    public function testLoadPlugins($config)
    {
        $config['sonic.plugins_enabled'] = TRUE;
        // Add assertion to check if plugins_enabled is true or not
        $sonic = new Sonic($config);
        $this->assertArrayHasKey('plugins', $sonic->app);
        $plugins = $sonic->app['plugins'];
        $this->assertArrayHasKey('WhoopsPlugin', $sonic->app['plugins']);
        $this->assertArrayHasKey('NavGenPlugin', $sonic->app['plugins']);
    }

    /**
     * @covers       Sonic\Sonic::setup_router()
     * @dataProvider providerConfigs
     */
    public function testSetupRouter($config)
    {
        $sonic = new Sonic($config);
        $routes = $sonic->app['router']->routes();

        // Check that routes were added as HTTP GET requests
        $this->assertArrayHasKey('GET', $routes);

        // Check to see only expected routes
        $expected = array('#^/404/$#', '#^/$#', '#^/sub/$#', '#^/sub/page/$#');

        // Check that all routes have a callback function
        $this->assertContainsOnly('Sonic\Routing\Route', $routes['GET']);

        foreach ($expected as $route_regex) {
            $this->assertArrayHasKey($route_regex, $routes['GET']);
        }
    }

    /**
     * @covers       Sonic\Sonic::run()
     * @dataProvider providerConfigs
     */
    public function testRun($config)
    {
        ob_start();
        $sonic = new Sonic($config);
        $this->assertTrue($sonic->run());
        ob_end_clean();
    }

    /**
     * @covers       Sonic\Sonic::run()
     * @dataProvider providerConfigs
     */
    public function testRunError($config)
    {
        $_SERVER['REQUEST_URL']     = '/non-existent';
        $_SERVER['REQUEST_URI']     = '/non-existent';
        ob_start();
        $sonic = new Sonic($config);
        $this->assertFalse($sonic->run());
        ob_end_clean();
    }

    /**
     * @covers       Sonic\Sonic::run_hooks()
     * @dataProvider providerConfigs
     */
    public function testRunHooks($config)
    {
        $config['sonic.plugins_enabled'] = TRUE;
        $sonic = new Sonic($config);
        $this->assertTrue($sonic->run_hooks('before_response_send'));
    }


    /**
     * @covers       Sonic\Sonic::run_hooks()
     * @dataProvider providerConfigs
     */
    public function testRunHooksWhenPluginsDisabled($config)
    {
        $config['sonic.plugins_enabled'] = FALSE;
        $sonic = new Sonic($config);
        $this->assertFalse($sonic->run_hooks('before_response_send'));
    }

    /**
     * INSTANTIATION TESTS
     */

    /**
     * @covers Sonic\Sonic::instance()
     */
    public function testInstanceBeforeInitialization()
    {
        $this->assertNull(Sonic::instance());
    }

    /**
     * @covers Sonic\Sonic::instance()
     * @dataProvider providerConfigs
     */
    public function testInstanceAfterInitialization($config)
    {
        $sonic = new Sonic($config);
        $this->assertInstanceOf('Sonic\Sonic', Sonic::instance());
    }

    /**
     * @covers Sonic\Sonic::kill()
     * @dataProvider providerConfigs
     */
    public function testKill($config)
    {
        $sonic = new Sonic($config);
        $this->assertInstanceOf('Sonic\Sonic', Sonic::instance());
        Sonic::kill();
        $this->assertNull(Sonic::instance());
    }

    /**
     * Returns a config with plugins enabled, and another with production mode enabled
     */
    public function providerConfigs()
    {
        $plugins_enabled                          = Helper::default_config();
        $plugins_enabled['sonic.plugins_enabled'] = TRUE;
        $production_mode                          = Helper::default_config();
        $production_mode['sonic.environment']     = 'production';
        return array(
            array(array(), $plugins_enabled, $production_mode)
        );
    }

}
