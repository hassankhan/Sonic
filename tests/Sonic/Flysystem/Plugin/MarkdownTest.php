<?php
namespace Sonic\Flysystem\Plugin;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-24 at 21:34:12.
 */
class MarkdownTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Markdown
     */
    protected $plugin;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $text = '/*' . PHP_EOL
            . 'Title: Sub Page' . PHP_EOL
            . '*/' . PHP_EOL . PHP_EOL
            . '## This is a Sub Page' . PHP_EOL . PHP_EOL
            . 'This is page.md in the "sub" folder.' . PHP_EOL . PHP_EOL
            . 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.' . PHP_EOL . PHP_EOL
            . 'Donec ultricies tristique nulla et mattis.' . PHP_EOL . PHP_EOL
            . 'Phasellus id massa eget nisl congue blandit sit amet id ligula.' . PHP_EOL;

        $this->parsed_text = '<h2>This is a Sub Page</h2>' . PHP_EOL . PHP_EOL
            . '<p>This is page.md in the "sub" folder.</p>' . PHP_EOL . PHP_EOL
            . '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>' . PHP_EOL . PHP_EOL
            . '<p>Donec ultricies tristique nulla et mattis.</p>' . PHP_EOL . PHP_EOL
            . '<p>Phasellus id massa eget nisl congue blandit sit amet id ligula.</p>' . PHP_EOL;

        // Create mock adapter and filesystem
        $adapter = $this->getMock(
            'League\Flysystem\Adapter\Local',
            array('read'),
            array(ROOT_DIR . 'content')
        );
        $adapter->expects($this->any())
            ->method('read')
            ->will($this->returnValue(
                array(
                    'contents' => $text,
                    'path'     => 'sub/page.md'
                )
            ));

        $filesystem = $this->getMock(
            'League\Flysystem\Filesystem',
            array('getAdapter'),
            array($adapter)
        );
        $filesystem->expects($this->any())
            ->method('getAdapter')
            ->will($this->onConsecutiveCalls($adapter));

        $this->plugin = new Markdown();
        $this->plugin->setFilesystem($filesystem);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Sonic\Flysystem\Plugin\Markdown::getMethod()
     */
    public function testGetMethod()
    {
        $this->assertEquals('parse', $this->plugin->getMethod());
    }

    /**
     * @covers Sonic\Flysystem\Plugin\Markdown::handle()
     * @covers Sonic\Flysystem\Plugin\Markdown::parse_meta()
     * @covers Sonic\Flysystem\Plugin\Markdown::parse_content()
     */
    public function testHandle()
    {
        $actual        = $this->plugin->handle('sub/page.md');
        $expected_meta = array(
            'title'         => 'Sub Page',
        );

        $this->assertEquals('sub/page.md', $actual['path']);
        $this->assertEquals($expected_meta, $actual['meta']);
        $this->assertEquals($this->parsed_text, $actual['contents']);
    }

}
