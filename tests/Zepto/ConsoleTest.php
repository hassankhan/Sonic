<?php
namespace Zepto;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-33 at 01:10:02.
 */
class ConsoleTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers Zepto\Console::getName()
     * @covers Zepto\Console::getInputs()
     */
    public function testGetName() {
        $zep = new Console(array(
          'zep',
          '-p'
        ));

        $zep->parse();
        $inputs = $zep->getInputs();

        $this->assertEquals('zep', $zep->getName());
        $this->assertEquals('-p', $inputs[0]);
    }

    /**
     * @covers Zepto\Console::option()
     * @covers Zepto\Console::checkInputs()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParse() {
        $zep = new Console(array(
          'zep',
          '-p',
          '--cheese',
          'cheddar'
        ));
        $zep->option('-p, --peppers', 'Add peppers');
        $zep->option('-c, --cheese [type]', 'Add a cheese');
        $zep->option('-m, --mayo', 'Add mayonaise');

        $zep->parse();

        $this->assertTrue($zep->get('-p'));
        $this->assertTrue($zep->get('--peppers'));

        $this->assertEquals('cheddar', $zep->get('-c'));
        $this->assertEquals('cheddar', $zep->get('--cheese'));

        $this->assertFalse($zep->get('-m'));
        $this->assertFalse($zep->get('--mayo'));
    }

    /**
     * @covers Zepto\Console::param()
     * @covers Zepto\Console::setParam()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParseWithParam() {
        $zep = new Console(array(
          'zep',
          'test',
          'uk'
        ));
        $zep->param('client', 'Name of client', true);
        $zep->param('locale', 'Client locale');
        $zep->parse();

        // expect parse to throw an exception that input is not defined
        $this->assertEquals("test", $zep->get('client'));
        $this->assertEquals("uk", $zep->get('locale'));
    }

    /**
     * @covers Zepto\Console::param()
     * @covers Zepto\Console::setParam()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParseWithRequiredParam() {
        $zep = new Console(array(
          'zep',
          'osx'
        ));

        $zep->param('client', 'Specify client', true);
        $zep->parse();

        // expect parse to throw an exception that input is not defined
        $this->expectOutputString('');
    }

    /**
     * @covers Zepto\Console::param()
     * @covers Zepto\Console::setParam()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParseWithRequiredParamWhenNotGiven() {
        $zep = new Console(array(
          'zep'
        ));
        $zep->param('client', 'Specify client', true);
        $zep->parse();

        // expect parse to throw an exception that input is not defined
        $this->expectOutputString(
            "Parameter 'client' is required"
            . PHP_EOL . PHP_EOL . PHP_EOL
            . "Usage: zep <client> [options]" . PHP_EOL
        );
    }

    /**
     * @covers Zepto\Console::option()
     * @covers Zepto\Console::parseOption()
     * @covers Zepto\Console::setOption()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParseWithOption() {
        $zep = new Console(array('zep'));
        $zep->option('-p, --peppers', 'Add peppers');
        $zep->option('-c, --cheese [type]', 'Add a cheese');
        $zep->parse();

        $options = $zep->getOptions();

        $this->assertCount(2, $options);
        $this->assertArrayHasKey('-p', $options);
        $this->assertArrayHasKey('-c', $options);
        $this->assertTrue($options['-c']['input']);
    }

    /**
     * @covers Zepto\Console::option()
     * @covers Zepto\Console::checkInputs()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParseWithNonOptions() {
        $zep = new Console(array(
          'zep',
          '-p',
          '--cheese',
          'cheddar',
          'extra',
          '-b',
          'info'
        ));
        $zep->option('-p, --peppers', 'Add peppers');
        $zep->option('-c, --cheese [type]', 'Add a cheese');

        $zep->parse();

        $this->assertTrue($zep->get('-p'));
        $this->assertTrue($zep->get('--peppers'));

        $this->assertEquals('cheddar', $zep->get('-c'));
        $this->assertEquals('cheddar', $zep->get('--cheese'));

        $this->assertEquals('extra', $zep->get(0));
        $this->assertEquals('-b', $zep->get(1));
        $this->assertEquals('info', $zep->get(2));
    }

    /**
     * @covers Zepto\Console::option()
     * @covers Zepto\Console::parseOption()
     * @covers Zepto\Console::setOption()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParseWithRequiredOption() {
        $zep = new Console(array(
          'zep',
          '-p'
        ));

        $zep->option('-h, --ham', 'Add ham');
        $zep->option('-b, --bread [type]', 'Type of bread', true);
        // $zep->option('-f', 'Type of flannel', true);

        $zep->parse();

        // expect parse to throw an exception that input is not defined
        $this->expectOutputString(
            "Option '-b, --bread [type] Type of bread' is required"
            . PHP_EOL . PHP_EOL . PHP_EOL
            . "Usage: zep [options]" . PHP_EOL
        );
    }

    /**
     * @covers Zepto\Console::option()
     * @covers Zepto\Console::parseOption()
     * @covers Zepto\Console::setOption()
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkRequired()
     */
    public function testParseWithRequiredOptionNotGiven() {
        $zep = new Console(array(
          'zep',
          '-p'
        ));

        $zep->option('-h, --ham', 'Add ham');
        $zep->option('-b, --bread [type]', 'Type of bread', true);

        $this->assertFalse($zep->parse());

        // expect parse to throw an exception that input is not defined
        $this->expectOutputString(
            "Option '-b, --bread [type] Type of bread' is required"
            . PHP_EOL . PHP_EOL . PHP_EOL
            . "Usage: zep [options]" . PHP_EOL
        );
    }

    /**
     * @covers Zepto\Console::parse()
     * @covers Zepto\Console::checkInputs()
     * @covers Zepto\Console::outputHelp()
     */
    public function testParseWithHelpFlagSet() {
        $zep = new Console(array(
          'zep',
          '-h'
        ));

        $zep->parse();

        $this->expectOutputString("\nUsage: zep [options]\n\nOptions:\n\t-h, --help Output usage information\n");
    }

    /**
     * @covers Zepto\Console::getParams()
     */
    public function testGetParams()
    {
        $zep = new Console(array(
            'zep',
            '-t',
            '-p',
        ));

        $zep->param('option',  'Name of option');
        $zep->param('option2', 'Name of option 2', true);

        $expected = array(
            0 => array(
                'name' => "option",
                'help' => "[option] Name of option",
                'required' => false
            ),
            1 => array(
                'name' => "option2",
                'help' => "<option2> Name of option 2",
                'required' => true
            ),
        );

        $this->assertEquals($expected, $zep->getParams());
    }

    /**
     * @covers Zepto\Console::getOptions()
     */
    public function testGetOptions()
    {
        $zep = new Console(array(
            'zep',
            '-t',
            '-p',
        ));

        $zep->option('-t, --test', 'Test');
        $zep->option('-p, --pest', 'Pest');

        $expected = array(
          '-t'  => array(
            'short' => '-t',
            'long'  => '--test',
            'help'  => '-t, --test Test'
          ),
          '-p'  => array(
            'short' => '-p',
            'long' => '--pest',
            'help' => '-p, --pest Pest'
          )
        );

        $this->assertEquals($expected, $zep->getOptions());
    }

    /**
     * @covers Zepto\Console::get()
     */
    public function testGet()
    {
        $zep = new Console(array(
            'zep',
            '-t',
            '-p',
        ));

        $zep->option('-t, --test', 'Test');
        $zep->option('-p, --pest', 'Pest');

        $zep->parse();

        $this->assertTrue($zep->get('-t'));
        $this->assertTrue($zep->get('-p'));
    }

    /**
     * @covers            Zepto\Console::get()
     * @expectedException Exception
     */
    public function testGetNonexistentOption()
    {
        $zep = new Console(array(
            'zep',
            '--test'
        ));

        $zep->get('unreal');
    }

    /**
     * @covers Zepto\Console::out()
     */
    public function testOut()
    {
        $zep = new Console(array(
            'zep',
            '-test'
        ));

        $zep->out('HAHA');
        $this->expectOutputString(PHP_EOL . 'HAHA' . PHP_EOL);
    }

    /**
     * @covers Zepto\Console::out()
     */
    public function testOutAsStaticMethod()
    {
        Console::out('HAHA');
        $this->expectOutputString(PHP_EOL . 'HAHA' . PHP_EOL);
    }

    /**
     * @covers Zepto\Console::option()
     * @covers Zepto\Console::parseOption()
     * @covers Zepto\Console::setOption()
     * @covers Zepto\Console::param()
     * @covers Zepto\Console::setParam()
     * @covers Zepto\Console::outputHelp()
     */
    public function testOutputHelp() {
        $zep = new Console(array(
            'zep',
            '-p',
            '--help'
        ));

        $zep->option('-p, --peppers', 'Add peppers');
        $zep->option('-c, --cheese [type]', 'Add a cheese');
        $zep->option('-m, --mayo', 'Add mayonaise');
        $zep->option('-b, --bread [type]', 'Type of bread', true);

        $zep->param('client', 'Name of client', true);
        $zep->param('locale', 'Client locale');

        $zep->outputHelp();

        $this->expectOutputString(PHP_EOL . "Usage: zep <client> [locale] [options]\n\nParameters:\n\t<client> Name of client\n\t[locale] Client locale\n\nOptions:\n\t-p, --peppers Add peppers\n\t-c, --cheese [type] Add a cheese\n\t-m, --mayo Add mayonaise\n\t-b, --bread [type] Type of bread [required]\n\t-h, --help Output usage information\n");
    }

    /**
     * @covers Zepto\Console::option()
     * @covers Zepto\Console::parseOption()
     * @covers Zepto\Console::setOption()
     * @covers Zepto\Console::param()
     * @covers Zepto\Console::setParam()
     * @covers Zepto\Console::outputHelp()
     */
    public function testOutputHelpShortened() {
        $zep = new Console(array(
            'zep',
            '-p',
            '--help'
        ));

        $zep->option('-p, --peppers', 'Add peppers');
        $zep->option('-c, --cheese [type]', 'Add a cheese');
        $zep->option('-m, --mayo', 'Add mayonaise');
        $zep->option('-b, --bread [type]', 'Type of bread', true);

        $zep->param('client', 'Name of client', true);
        $zep->param('locale', 'Client locale');

        $zep->outputHelp(TRUE);

        $this->expectOutputString("\nUsage: zep <client> [locale] [options]\n");
    }

}
