<?php
namespace Zepto;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-20 at 00:37:02.
 */
class ZeptoTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Zepto
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $_SERVER['DOCUMENT_ROOT']   = '/var/www';
        $_SERVER['SCRIPT_FILENAME'] = '/var/www/zepto/index.php';
        $_SERVER['SERVER_NAME']     = 'zepto';
        $_SERVER['SERVER_PORT']     = '80';
        $_SERVER['SCRIPT_NAME']     = '/zepto/';
        $_SERVER['REQUEST_URL']     = '/zepto/';
        $_SERVER['REQUEST_URI']     = '/zepto/';
        $_SERVER['PATH_INFO']       = '/bar/xyz';
        $_SERVER['REQUEST_METHOD']  = 'GET';
        $_SERVER['QUERY_STRING']    = 'one=1&two=2&three=3';
        $_SERVER['HTTPS']           = '';
        $_SERVER['REMOTE_ADDR']     = '127.0.0.1';
        unset($_SERVER['CONTENT_TYPE'], $_SERVER['CONTENT_LENGTH']);

        include ROOT_DIR . 'config.php';
        $this->object = new Zepto($config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * CONSTRUCTOR TESTS
     */

    /**
     * @covers Zepto\Zepto::__construct()
     * @covers Zepto\Zepto::load_content()
     * @covers Zepto\Zepto::create_nav_links()
     */
    public function testRouterAdded()
    {
        $zepto = $this->object;
        $this->assertArrayHasKey('router', $zepto->container);
        $this->assertInstanceOf(
            'Zepto\Router',
            $zepto->container['router']
        );
    }

    /**
     * @covers Zepto\Zepto::__construct()
     * @covers Zepto\Zepto::load_content()
     * @covers Zepto\Zepto::create_nav_links()
     */
    public function testPluginLoaderAdded()
    {
        $zepto = $this->object;
        $this->assertArrayHasKey('plugin_loader', $zepto->container);
        $this->assertInstanceOf(
            'Zepto\FileLoader\PluginLoader',
            $zepto->container['plugin_loader']
        );
    }

    /**
     * @covers Zepto\Zepto::__construct()
     * @covers Zepto\Zepto::load_content()
     * @covers Zepto\Zepto::create_nav_links()
     */
    public function testFileLoaderAdded()
    {
        $zepto = $this->object;
        $this->assertArrayHasKey('file_loader', $zepto->container);
        $this->assertInstanceOf(
            'Zepto\FileLoader\MarkdownLoader',
            $zepto->container['file_loader']
        );
    }

    /**
     * @covers Zepto\Zepto::__construct()
     * @covers Zepto\Zepto::load_content()
     * @covers Zepto\Zepto::create_nav_links()
     */
    public function testTwigAdded()
    {
        $zepto = $this->object;
        $this->assertArrayHasKey('twig', $zepto->container);
        $this->assertInstanceOf(
            '\Twig_Environment',
            $zepto->container['twig']
        );
    }

    /**
     * INITIALIZATION TESTS
     */

    /**
     * @covers Zepto\Zepto::load_plugins()
     */
    public function testLoadPlugins()
    {
        $zepto = $this->object;
        $this->assertArrayHasKey('plugins', $zepto->container);
        $plugins = $zepto->container['plugins'];
        $this->assertArrayHasKey('ExamplePlugin', $zepto->container['plugins']);
        $this->assertArrayHasKey('OtherExamplePlugin', $zepto->container['plugins']);
    }

    /**
     * @covers Zepto\Zepto::load_plugins()
     */
    public function testLoadPluginsWhenDisabled()
    {
        include ROOT_DIR . 'config.php';
        $config['zepto']['plugins_enabled'] = false;
        $zepto = new Zepto($config);
        $this->assertArrayNotHasKey('plugins', $zepto->container);
    }

    /**
     * @covers Zepto\Zepto::load_content()
     */
    public function testLoad_content()
    {
        $this->markTestIncomplete('Not yet implemented');
    }

    /**
     * @covers Zepto\Zepto::create_nav_links()
     * @covers Zepto\Zepto::generate_nav_html()
     */
    public function testCreateNavLinks()
    {
        $expected = '<li><a href="Site root URL goes here/"> Welcome </a></li>' . PHP_EOL
            . '<li class="dropdown">' . PHP_EOL
            . '<a href="index.md" class="dropdown-toggle" data-toggle="dropdown"> Sub <b class="caret"></b></a>' . PHP_EOL
            . '<ul class="dropdown-menu">' . PHP_EOL
            . '<li><a href="Site root URL goes here/sub/"> Sub Page Index </a></li>' . PHP_EOL
            . '<li><a href="Site root URL goes here/sub/page"> Sub Page </a></li>' . PHP_EOL
            . '</ul></li>' . PHP_EOL;

        $zepto = $this->object;
        $this->assertEquals(array('nav' => $expected), $zepto->container['nav']);
    }

    /**
     * @covers Zepto\Zepto::setup_router()
     */
    public function testSetupRouter()
    {
        $zepto  = $this->object;
        $routes = $zepto->container['router']->get_routes();

        // Check that routes were added as HTTP GET requests
        $this->assertArrayHasKey('GET', $routes);

        // Check to see only expected routes
        $expected = array('#^/404/$#', '#^/$#', '#^/sub/$#', '#^/sub/page/$#');

        // Check that all routes have a callback function
        $this->assertContainsOnly('Closure', $routes['GET']);

        foreach ($expected as $route_regex) {
            $this->assertArrayHasKey($route_regex, $routes['GET']);
        }
    }

    /**
     * @covers Zepto\Zepto::run
     * @todo   Implement testRun().
     */
    public function testRun()
    {
        // Check to see that the index page has loaded
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Zepto\Zepto::run_hooks
     * @todo   Implement testRun_hooks().
     */
    public function testRun_hooks()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
